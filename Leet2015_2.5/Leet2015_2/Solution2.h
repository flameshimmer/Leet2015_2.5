namespace Solution2
{
	namespace TwoSum{ void Main(); }
	namespace ThreeSum{ void Main(); }
	namespace ThreeSumClosest{ void Main(); }
	namespace FourSum{ void Main(); }
	namespace AddTwoNumbers{ void Main(); }
	namespace AddBinary{ void Main(); }
	namespace Anagrams{ void Main(); }
	namespace LongestSubStringWithoutRepeatingCharacters{ void Main(); }
	namespace LongestPalindromeSubString{ void Main(); }
	namespace LongestCommonPrefix{ void Main(); }
	namespace LongestValidParentheses{ void Main(); }
	namespace LongestConsecutiveSequence{ void Main(); }
	namespace SearchInRotatedSortedArray{ void Main(); }
	namespace SearchInRotatedSortedArrayII{ void Main(); }
	namespace ReverseInteger{ void Main(); }
	namespace ReverseBits{ void Main(); }
	namespace ReverseWordsInAString{ void Main(); }
	namespace ReverseWordsInAStringII{ void Main(); }
	namespace ReverseLinkedListII{ void Main(); }
	namespace ReverseNodesInKGroup{ void Main(); }
	namespace RomanToInteger{ void Main(); }
	namespace IntegerToRoman{ void Main(); }
	namespace WordBreak{ void Main(); }
	namespace WordBreakII{ void Main(); }
	namespace NumberOf1Bits{ void Main(); }
	namespace PlusOne{ void Main(); }
	namespace FactorialTrailingZeroes{ void Main(); }
	namespace PascalsTriangle{ void Main(); }
	namespace PascalsTriangleII{ void Main(); }
	namespace LinkedListCycle{ void Main(); }
	namespace LinkedListCycleII{ void Main(); }
	namespace RotateArray{ void Main(); }
	namespace RotateImage{ void Main(); }
	namespace RotateList{ void Main(); }
	namespace FirstMissingPositive{ void Main(); }
	namespace FindMinimumInRotatedSortedArray{ void Main(); }
	namespace FindMinimumInRotatedSortedArrayII{ void Main(); }
	namespace UniquePaths{ void Main(); }
	namespace UniquePathsII{ void Main(); }
	namespace DecodeWays{ void Main(); }
	namespace EditDistance{ void Main(); }
	namespace MaximumSubarray{ void Main(); }
	namespace Combinations{ void Main(); }
	namespace CombinationSum{ void Main(); }
	namespace CombinationSumII{ void Main(); }
	namespace MedianOfTwoSortedArrays{ void Main(); }
	namespace PalindromeNumber{ void Main(); }
	namespace StringToInteger{ void Main(); }
	namespace LetterCombinationsOfAPhoneNumber{ void Main(); }
	namespace RemoveNthNodeFromEndOfList{ void Main(); }
	namespace SingleNumber{ void Main(); }
	namespace SingleNumberII{ void Main(); }
	namespace ValidParentheses{ void Main(); }
	namespace ValidPalindrome{ void Main(); }
	namespace ValidSudoku{ void Main(); }
	namespace SudokuSolver{ void Main(); }
	namespace RegularExpressionMatching{ void Main(); }
	namespace WildcardMatching{ void Main(); }
	namespace MinimumPathSum{ void Main(); }
	namespace Triangle{ void Main(); }
	namespace InterleavingString{ void Main(); }
	namespace MergeTwoSortedLists{ void Main(); }
	namespace MergeKSortedLists{ void Main(); }
	namespace GenerateParentheses{ void Main(); }
	namespace SwapNodesInPairs{ void Main(); }
	namespace RemoveDuplicatesFromSortedArray{ void Main(); }
	namespace RemoveElement{ void Main(); }
	namespace DivideTwoIntegers{ void Main(); }
	namespace RemoveDuplicatesfromSortedList{ void Main(); }
	namespace NextPermutation{ void Main(); }
	namespace CountAndSay{ void Main(); }
	namespace LengthOfLastWord{ void Main(); }
	namespace RemoveDuplicatesFromSortedListII{ void Main(); }
	namespace PartitionList{ void Main(); }
	namespace SortList{ void Main(); }
	namespace ReorderList{ void Main(); }
	namespace IntersectionOfTwoLinkedLists{ void Main(); }
	namespace InsertionSortList{ void Main(); }
	namespace ZigZagConversion{ void Main(); }
	namespace ContainerWithMostWater{ void Main(); }
	namespace ImplementStrStr{ void Main(); }
	namespace Permutation{ void Main(); }
	namespace PermutationII{ void Main(); }
	namespace Pow{ void Main(); }
	namespace Subsets{ void Main(); }
	namespace SubsetsII{ void Main(); }
	namespace GrayCode{ void Main(); }
	namespace CopyListWithRandomPointer{ void Main(); }
	namespace ConvertSortedListToBinarySearchTree{ void Main(); }
	namespace SearchForARange{ void Main(); }
	namespace MergeSortedArray{ void Main(); }
	namespace MajorityElement{ void Main(); }
	namespace ExcelSheetColumnNumber{ void Main(); }
	namespace ExcelSheetColumnTitle{ void Main(); }
	namespace CompareVersionNumbers{ void Main(); }
	namespace SearchInsertionPosition{ void Main(); }
	namespace ClimbingStairs{ void Main(); }
	namespace MaximalRectangle{ void Main(); }
	namespace LargestRectangleInHistogram{ void Main(); }
	namespace TrappingRainWater{ void Main(); }
	namespace BitwiseAndOfNumbersRange{ void Main(); }
	namespace MultiplyStrings{ void Main(); }
	namespace JumpGame{ void Main(); }
	namespace JumpGameII{ void Main(); }
	namespace NQueens{ void Main(); }
	namespace NQueensII{ void Main(); }
	namespace HouseRobber{ void Main(); }
	namespace SpiralMatrix{ void Main(); }
	namespace SpiralMatrixII{ void Main(); }
	namespace Sqrt{ void Main(); }
	namespace MergeIntervals{ void Main(); }
	namespace InsertInterval{ void Main(); }
	namespace PermutationSequence{ void Main(); }
	namespace SetMatrixZeroes{ void Main(); }
	namespace RemoveLinkedListElements{ void Main(); }
	namespace PathSum{ void Main(); }
	namespace MaximumDepthOfBinaryTree{ void Main(); }
	namespace MinimumDepthOfBinaryTree{ void Main(); }
	namespace SymmetricTree{ void Main(); }
	namespace ValidNumber{ void Main(); }
	namespace TextJustification{ void Main(); }
	namespace SimplifyPath{ void Main(); }
	namespace SearchA2DMatrix{ void Main(); }
	namespace SortColors{ void Main(); }
	namespace WordSearch{ void Main(); }
	namespace RemoveDuplicatesFromSortedArrayII{ void Main(); }
	namespace RestoreIPAddresses{ void Main(); }
	namespace BalancedBinaryTree{ void Main(); }
	namespace BinaryTreeLevelOrderTraversal{ void Main(); }
	namespace BinaryTreeLevelOrderTraversalII{ void Main(); }
	namespace PathSumII{ void Main(); }
	namespace BinarySearchTreeIterator{ void Main(); }
	namespace SumRootToLeafNumbers{ void Main(); }
	namespace BinaryTreePreorderTraversal{ void Main(); }
	namespace FlattenBinaryTreeToLinkedList{ void Main(); }
	namespace BinaryTreeZigzagLevelOrderTraversal{ void Main(); }
	namespace BinaryTreeUpsideDown{ void Main(); }
	namespace ConstructBinaryTreeFromPreorderAndInorderTraversal{ void Main(); }
	namespace ConstructBinaryTreeFromInorderAndPostorderTraversal{ void Main(); }
	namespace BinaryTreeRightSideView{ void Main(); }
	namespace UniqueBinarySearchTrees{ void Main(); }
	namespace UniqueBinarySearchTreesII{ void Main(); }
	namespace ConvertSortedArrayToBinarySearchTree{ void Main(); }
	namespace PopulatingNextRightPointersInEachNode{ void Main(); }
	namespace PopulatingNextRightPointersInEachNodeII{ void Main(); }
	namespace BinaryTreeInorderTraversal{ void Main(); }
	namespace ValidateBinarySearchTree{ void Main(); }
	namespace BinaryTreePostorderTraversal{ void Main(); }
	namespace BinaryTreeMaximumPathSum{ void Main(); }
	namespace RecoverBinarySearchTree{ void Main(); }
	namespace HappyNumber{ void Main(); }
	namespace IsomorphicStrings{ void Main(); }
	namespace ReadNCharactersGivenRead4{ void Main(); }
	namespace LargestNumber{ void Main(); }
	namespace ReverseLinkedList{ void Main(); }
	namespace GasStation{ void Main(); }
	namespace MinimumWindowSubstring{ void Main(); }
	namespace SubstringWithConcatenationOfAllWords{ void Main(); }
	namespace NumberOfIslands{ void Main(); }
	namespace MinimumSizeSubarraySum{ void Main(); }
	namespace CloneGraph{ void Main(); }
	namespace MinStack{ void Main(); }
	namespace CountPrimes{ void Main(); }
	namespace PalindromePartitioning{ void Main(); }
	namespace PalindromePartitioningII{ void Main(); }
	namespace TwoSumII{ void Main(); }
	namespace TwoSumIII{ void Main(); }
	namespace SurroundedRegions{ void Main(); }
	namespace FindPeakElement{ void Main(); }
	namespace EvaluateReversePolishNotation{ void Main(); }
	namespace BestTimeToBuyAndSellStock{ void Main(); }
	namespace BestTimeToBuyAndSellStockII{ void Main(); }
	namespace BestTimeToBuyAndSellStockIII{ void Main(); }
	namespace BestTimeToBuyAndSellStockIV{ void Main(); }
	namespace ContainsDuplicate{ void Main(); }
	namespace ContainsDuplicateII{ void Main(); }
	namespace InvertBinaryTree{ void Main(); }
	namespace RectangleArea{ void Main(); }
	namespace MaximumProductSubarray{ void Main(); }
	namespace CombinationSumIII{ void Main(); }
	namespace KthLargestElementInAnArray{ void Main(); }
	namespace HouseRobberII{ void Main(); }
	namespace RepeatedDNASequences{ void Main(); }
	namespace AddAndSearchWordDataStructureDesign{ void Main(); }
	namespace ImplementTrie{ void Main(); }
	namespace CourseSchedule{ void Main(); }
	namespace CourseScheduleII{ void Main(); }
	namespace ImplementStackUsingQueues{ void Main(); }
	namespace MaximumGap{ void Main(); }
	namespace FractionToRecurringDecimal{ void Main(); }
	namespace BasicCalculator{ void Main(); }
	namespace ScrambleString{ void Main(); }
	namespace Candy{ void Main(); }
	namespace DistinctSubsequences{ void Main(); }
	namespace LRUCacheEntry{ void Main(); }
	namespace MaxPointsOnALine{ void Main(); }
	namespace ReadNCharactersGivenRead4II{ void Main(); }
	namespace OneEditDistance{ void Main(); }
	namespace MissingRanges{ void Main(); }
	namespace CountCompleteTreeNodes{ void Main(); }
	namespace BasicCalculatorII{ void Main(); }
	namespace MaximalSquare{ void Main(); }
	namespace LongestSubstringWithAtMostTwoDistinctCharacters{ void Main(); }
	namespace ShortestPalindrome{ void Main(); }
	namespace WordSearchII{ void Main(); }
	namespace ContainsDuplicateIII{ void Main(); }
	namespace DungeonGame{ void Main(); }
	namespace SummaryRanges{ void Main(); }
	namespace TheSkylineProblem{ void Main(); }
	namespace WordLadder{ void Main(); }
	namespace WordLadderII{ void Main(); }
};
